diff --git a/src/Plugin/views/argument/BBoxArgument.php b/src/Plugin/views/argument/BBoxArgument.php
index d9d4ef8..c5af64b 100644
--- a/src/Plugin/views/argument/BBoxArgument.php
+++ b/src/Plugin/views/argument/BBoxArgument.php
@@ -23,6 +23,7 @@ class BBoxArgument extends StringArgument implements ContainerFactoryPluginInter
   protected function defineOptions() {
     $options = parent::defineOptions();
     $options['round_coordinates'] = ['default' => TRUE];
+    $options['point_logic'] = ['default' => TRUE];
 
     return $options;
   }
@@ -52,6 +53,12 @@ class BBoxArgument extends StringArgument implements ContainerFactoryPluginInter
       '#default_value' => $this->options['title'],
       '#description' => $this->t('Round coordinates to two decimal places. This can help in caching bounding box queries. For instance, "-0.542,51.344,-0.367,51.368" and "-0.541,51.343,-0.368,51.369" would use the same SQL query.'),
     ];
+    $form['point_logic'] = [
+      '#type' => 'checkbox',
+      '#title' => $this->t('Apply point logic only'),
+      '#default_value' => $this->options['point_logic'],
+      '#description' => $this->t('When true, use simpler logic that includes only features that have their lat/lon values inside the bounding box. This works for points but does not work well for polygons and polylines (for which the lat/lon coordinates of Geofields are a geometric centroid).'),
+    ];
   }
 
   /**
@@ -79,37 +86,213 @@ class BBoxArgument extends StringArgument implements ContainerFactoryPluginInter
         return;
       }
 
-      // @todo - get geo_table from field definition?
-      $geo_table = "node__{$geofield_name}";
-
-      if ($geofield_type == 'geolocation') {
-        $geo_table_entity_id_field = 'entity_id';
-        $field_lat = "{$geo_table}.field_geolocation_lat";
-        $field_lng = "{$geo_table}.field_geolocation_lng";
-      }
-      elseif ($geofield_type == 'geofield') {
-        $geo_table_entity_id_field = 'entity_id';
-        $field_lat = "{$geo_table}.{$geofield_name}_lat";
-        $field_lng = "{$geo_table}.{$geofield_name}_lon";
+      if ($this->options['point_logic'] || $geofield_type == 'geolocation') {
+          $this->pointLogicQuery($bbox, $geofield_type, $geofield_name);
+      } else {
+          $this->generalQuery($bbox, $geofield_type, $geofield_name);
       }
 
-      if (!empty($geo_table)) {
-        $this->query->ensureTable($geo_table, NULL, new JoinPluginBase([
-          'table' => $geo_table,
-          'field' => $geo_table_entity_id_field,
-          'left_table' => 'node_field_data',
-          'left_field' => 'nid',
-        ],
-          NULL, NULL));
-      }
+    }
+  }
+
+  /**
+   * Geofield with full bounding box logic requested.
+   *
+   * @param array $bbox
+   *   top, left, right, bottom coordinates (numeric values) for search bounding box
+   *
+   * @param string $geofield_type
+   *    field type for location storage
+   *
+   * @param string $geofield_name
+   *    field name for location storage
+   *
+   */
+  protected function generalQuery($bbox, $geofield_type, $geofield_name) {
+    $table = NULL;
+
+    if (isset($this->view->field[$geofield_name]) &&
+      isset($this->view->field[$geofield_name]->table)) {
+        $table = $this->view->field[$geofield_name]->table;
+    }
+
+    if (isset($this->viewsData) && isset($table)) {
+      $viewsData = $this->viewsData->getAll();
+      $t_storage = $viewsData[$table];
+
+      // pack the field table and column information for each geometry edge
+      $g = array(
+        'top' => $this->_geofield_db_names($geofield_name, $t_storage, $table, 'top'),
+        'bottom' => $this->_geofield_db_names($geofield_name, $t_storage, $table, 'bottom'),
+        'left' => $this->_geofield_db_names($geofield_name, $t_storage, $table, 'left'),
+        'right' => $this->_geofield_db_names($geofield_name, $t_storage, $table, 'right'),
+      );
+      $entity_id_field = $t_storage['table']['join']['node_field_data']['field'];
+    }
+
+    $table_field_defined = isset($table) && isset($entity_id_field);
+    $top_bottom_defined = isset($g['top']) && isset($g['bottom']);
+    $left_right_defined = isset($g['left']) && isset($g['right']);
+
+    if (!$table_field_defined || !$top_bottom_defined || !$left_right_defined) {
+      return;
+    }
+
+    if (!empty($table)) {
+      $this->query->ensureTable($table, NULL, new JoinPluginBase([
+        'table' => $table,
+        'field' => $entity_id_field,
+        'left_table' => 'node_field_data',
+        'left_field' => $t_storage['table']['join']['node_field_data']['left_field']
+      ],
+      NULL, NULL));
+    }
+
+    /*
+     * To check whether two aligned bounding boxes overlap, check
+     * the following conditions:
+     * - if one rectangle is completely to one side of the other,
+     *   they cannot overlap.
+     * - if one rectangle is completely above or below the other,
+     *   they cannot overlap.
+     *
+     * If neither of those conditions are true, then the rectangles
+     * overlap.
+     *
+     * With numeric bbox values:
+     * bbl: bbox left
+     * bbb: bbox bottom
+     * bbr: bbox right
+     * bbt: bbox top
+     *
+     * and feature bounding box edges represented by fields l, b, t, r,
+     * the above conditions can be reworked through Boolean algebra to
+     * show that features whose bounding boxes meet the following
+     * condition with the view bounding box edges overlap:
+     *
+     * (l < bbr && bbl < r) && (b < bbt && bbb < t)
+     *
+     * This condition identifies the features to be included in the view
+     * and is the WHERE clause that needs to be built.
+     */
+    $values = [];
+
+    $ph = $this->placeholder();
+    $exp1 = $this->_format_db_table_column_specifier($g["left"]) . " < {$ph}";
+    $values[$ph] = $bbox["right"];
+
+    $ph = $this->placeholder();
+    $exp2 = "{$ph} < " . $this->_format_db_table_column_specifier($g["right"]);
+    $values[$ph] = $bbox["left"];
+
+    $ph = $this->placeholder();
+    $exp3 = $this->_format_db_table_column_specifier($g["bottom"]) . " < {$ph}";
+    $values[$ph] = $bbox["top"];
+
+    $ph = $this->placeholder();
+    $exp4 = "{$ph} < " . $this->_format_db_table_column_specifier($g["top"]);
+    $values[$ph] = $bbox["bottom"];
 
-      $this->query->addWhere('bbox', $field_lat, $bbox['bottom'], '>=');
-      $this->query->addWhere('bbox', $field_lat, $bbox['top'], '<=');
-      $this->query->addWhere('bbox', $field_lng, $bbox['left'], '>=');
-      $this->query->addWhere('bbox', $field_lng, $bbox['right'], '<=');
+    $exp = "{$exp1} AND {$exp2} AND {$exp3} AND {$exp4}";
+    $group = $this->query->setWhereGroup('AND');
+    $this->query->addWhereExpression($group, $exp, $values);
+  }
+
+  /**
+   * get database table and column names for geofield variables
+   *
+   * Fetch the database table and column names for each of the geofield variables
+   * representing a bounding box edge.
+   *
+   * @param string $geofield_name
+   *   name of the geofield variable
+   *
+   * @param array $t_storage
+   *   table information from viewsData
+   *
+   * @param string $table
+   *   name of node table
+   *
+   * @param string $key
+   *   name of the bounding box edge variable we are dealing with: top, bottom, left or right
+   *
+   * @return array
+   **/
+  private function _geofield_db_names($geofield_name, $t_storage, $table, $key) {
+    $fieldname = "{$geofield_name}_{$key}";
+    if (isset($t_storage[$fieldname])) { // sanity check the generated name
+      return array(
+        'tablename' => $table,
+        'fieldname' => $fieldname
+      );
+    }
+    else {
+      return NULL;
     }
   }
 
+  /**
+   * Format table and field name using dotted notation for use in query.
+   *
+   * @param array $coord_info
+   *   array containing tablename and fieldname keys and values.
+   *
+   * @return string
+   **/
+  private function _format_db_table_column_specifier($coord_info) {
+    return "{$coord_info['tablename']}.{$coord_info['fieldname']}";
+  }
+
+ /**
+   * If point logic requested or if the Geolocation is used for geometry storage
+   * (only points), then do simplest bounding box check: find feature points that
+   * are inside the specified bounding box.
+   *
+   * In this case, if locations are stored as Geofields and they are not just points,
+   * the logic uses the lat/lon values and these are geometric centroids of the stored
+   * features.
+   *
+   * @param array $bbox
+   *   top, left, right, bottom coordinates (numeric values) for search bounding box
+   *
+   * @param string $geofield_type
+   *    field type for location storage
+   *
+   * @param string $geofield_name
+   *    field name for location storage
+   *
+   */
+  protected function pointLogicQuery($bbox, $geofield_type, $geofield_name) {
+    // @todo - get geo_table from field definition?
+    $geo_table = "node__{$geofield_name}";
+
+    if ($geofield_type == 'geolocation') {
+      $geo_table_entity_id_field = 'entity_id';
+      $field_lat = "{$geo_table}.field_geolocation_lat";
+      $field_lng = "{$geo_table}.field_geolocation_lng";
+    }
+    elseif ($geofield_type == 'geofield') {
+      $geo_table_entity_id_field = 'entity_id';
+      $field_lat = "{$geo_table}.{$geofield_name}_lat";
+      $field_lng = "{$geo_table}.{$geofield_name}_lon";
+    }
+
+    if (!empty($geo_table)) {
+      $this->query->ensureTable($geo_table, NULL, new JoinPluginBase([
+        'table' => $geo_table,
+        'field' => $geo_table_entity_id_field,
+        'left_table' => 'node_field_data',
+        'left_field' => 'nid'
+      ],
+      NULL, NULL));
+    }
+
+    $this->query->addWhere('bbox', $field_lat, $bbox['bottom'], '>=');
+    $this->query->addWhere('bbox', $field_lat, $bbox['top'], '<=');
+    $this->query->addWhere('bbox', $field_lng, $bbox['left'], '>=');
+    $this->query->addWhere('bbox', $field_lng, $bbox['right'], '<=');
+  }
+
   /**
    * Parses the bounding box argument.
    *
@@ -119,7 +302,7 @@ class BBoxArgument extends StringArgument implements ContainerFactoryPluginInter
    * @return array|bool
    *   The calculated values.
    */
-  public function getParsedBoundingBox() {
+  protected function getParsedBoundingBox() {
     static $values;
 
     if (!isset($values)) {
